""" PackmolWrapper.py has a Python class helpful for generating Packmol input files
    Copyright (C) 2015      Kyle J. Huston

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>."""

""" Quick Guide for Packmol's Input located at
    http://www.ime.unicamp.br/~martinez/packmol/ """
class PackmolStructure():
    def __init__(self,pdb,number):
        self.pdb = pdb
        self.number = number
        self.constraint_text = ''
    def addConstraintFixed(self,x,y,z,a,b,g):
        self.constraint_text += 'fixed %f %f %f %f %f %f\n'%(x,y,z,a,b,g)
    def addConstraintInsideCube(self,x_min,y_min,z_min,d):
        self.constraint_text += 'inside cube %f %f %f %f\n'%(x_min,y_min,z_min,d)
    def addConstraintOutsideCube(self,x_min,y_min,z_min,d):
        self.constraint_text += 'outside cube %f %f %f %f\n'%(x_min,y_min,z_min,d)
    def addConstraintInsideBox(self,x_min,y_min,z_min,x_max,y_max,z_max):
        self.constraint_text += 'inside box %f %f %f %f %f %f\n'%(x_min,y_min,z_min,x_max,y_max,z_max)
    def addConstraintOutsideBox(self,x_min,y_min,z_min,x_max,y_max,z_max):
        self.constraint_text += 'outside box %f %f %f %f %f %f\n'%(x_min,y_min,z_min,x_max,y_max,z_max)
    def addConstraintInsideSphere(self,a,b,c,d):
        self.constraint_text += 'inside sphere %f %f %f %f\n'%(a,b,c,d)
    def addConstraintOutsideSphere(self,a,b,c,d):
        self.constraint_text += 'outside sphere %f %f %f %f\n'%(a,b,c,d)
    def addConstraintOverPlane(self,a,b,c,d):
        """ From Packmol User Guide:
                The planes are defined by the general equation
                ax + by + cz - d = 0
                And it is possible to restrict atoms to be over [>= 0] or below [<= 0] the plane."""
        self.constraint_text += 'over plane %f %f %f %f\n'%(a,b,c,d)
    def addConstraintBelowPlane(self,a,b,c,d):
        """ From Packmol User Guide:
                The planes are defined by the general equation
                ax + by + cz - d = 0
                And it is possible to restrict atoms to be below [>= 0] or below [<= 0] the plane."""
        self.constraint_text += 'below plane %f %f %f %f\n'%(a,b,c,d)

class PackmolInput():
    def __init__(self,tolerance,filetype,output,box_buffer):
        self.tolerance = tolerance
        self.filetype = filetype
        self.output = output
        self.box_buffer = box_buffer
        self.structures = []
    def genFileText(self):
        file_text = '# Generated by PackmolWrapper.py\n'
        file_text += 'tolerance %f\n'%(self.tolerance)
        file_text += 'filetype %s\n'%(self.filetype)
        file_text += 'output %s\n'%(self.output)
        file_text += 'add_box_sides %f\n'%(self.box_buffer)
        file_text += '\n'
        for structure in self.structures:
            file_text += 'structure %s\n'%(structure.pdb)
            file_text += '  number %d\n  '%(structure.number) 
            file_text += structure.constraint_text.replace('\n','\n  ')
            file_text = file_text[:-2]
            file_text += 'end structure\n\n'
        return file_text
    def exportFile(self,path):
        with open(path,'w') as inputfile:
            inputfile.write(self.genFileText())
    def addStructure(self,pdb,number):
        self.structures.append(PackmolStructure(pdb,number))
    def addConstraintFixed(self,x,y,z,a,b,g):
        self.structures[-1].addConstraintFixed(x,y,z,a,b,g)
    def addConstraintInsideCube(self,x_min,y_min,z_min,d):
        self.structures[-1].addConstraintInsideCube(x_min,y_min,z_min,d)
    def addConstraintOutsideCube(self,x_min,y_min,z_min,d):
        self.structures[-1].addConstraintOutsideCube(x_min,y_min,z_min,d)
    def addConstraintInsideBox(self,x_min,y_min,z_min,x_max,y_max,z_max):
        self.structures[-1].addConstraintInsideBox(x_min,y_min,z_min,x_max,y_max,z_max)
    def addConstraintOutsideBox(self,x_min,y_min,z_min,x_max,y_max,z_max):
        self.structures[-1].addConstraintOutsideBox(x_min,y_min,z_min,x_max,y_max,z_max)
    def addConstraintInsideSphere(self,a,b,c,d):
        self.structures[-1].addConstraintInsideSphere(a,b,c,d)
    def addConstraintOutsideSphere(self,a,b,c,d):
        self.structures[-1].addConstraintOutsideSphere(a,b,c,d)
    def addConstraintOverPlane(self,a,b,c,d):
        self.structures[-1].addConstraintOverPlane(a,b,c,d)
    def addConstraintBelowPlane(self,a,b,c,d):
        self.structures[-1].addConstraintBelowPlane(a,b,c,d)
